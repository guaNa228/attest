// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups(
        id,
        created_at,
        updated_at,
        subcode,
  		stream,
  		course
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
  		$6
    )
RETURNING id, created_at, updated_at, subcode, stream, course
`

type CreateGroupParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Subcode   string
	Stream    uuid.UUID
	Course    int16
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Subcode,
		arg.Stream,
		arg.Course,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Subcode,
		&i.Stream,
		&i.Course,
	)
	return i, err
}


const deleteGroupByCode = `-- name: DeleteGroupByCode :exec
DELETE FROM groups
WHERE code = $1
`

func (q *Queries) DeleteGroupByCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteGroupByCode, code)
	return err
}

const deleteGroupByID = `-- name: DeleteGroupByID :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroupByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroupByID, id)
	return err
}

const getGroupByFullCode = `-- name: GetGroupByFullCode :one
SELECT g.id
FROM groups g,
    streams s
WHERE g.stream = s.id
    and s.code = $1
    and g.subcode = $2
`

type GetGroupByFullCodeParams struct {
	Code    string
	Subcode string
}

func (q *Queries) GetGroupByFullCode(ctx context.Context, arg GetGroupByFullCodeParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getGroupByFullCode, arg.Code, arg.Subcode)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFileData = `-- name: GetFileData :many
SELECT a.code, a.stream, a.name, a.email 
from (SELECT s.code || '/' || g.subcode as code,
	s.name as stream,
    u.name,
	u.email
from users u,
    groups g,
    streams s
where u.role = 'student'
    and u.group_id = g.id
    and g.stream = s.id) a
group by a.stream, a.code, (a.name, a.email)
`

type GetFileDataRow struct {
	Code   string
	Stream string
	Name   string
	Email  sql.NullString
}

func (q *Queries) GetFileData(ctx context.Context) ([]GetFileDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getFileData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFileDataRow
	for rows.Next() {
		var i GetFileDataRow
		if err := rows.Scan(
			&i.Code,
			&i.Stream,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
