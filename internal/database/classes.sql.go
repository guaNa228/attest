// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createClass = `-- name: CreateClass :one
INSERT INTO classes(id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateClassParams struct {
	ID   uuid.UUID `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass, arg.ID, arg.Name)
	var i Class
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteClassByID = `-- name: DeleteClassByID :exec
DELETE FROM classes
WHERE id = $1
`

func (q *Queries) DeleteClassByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteClassByID, id)
	return err
}

const clearClassesTable = `-- name: ClearClassesTable :exec
DELETE from classes
`

func (q *Queries) ClearClassesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearClassesTable)
	return err
}

const getAllStreams = `-- name: GetAllStreams :many
SELECT DISTINCT s.id,
    s.name
from attestation a,
    workloads w,
    groups g,
    streams s
where w.group_id = g.id
    and g.stream = s.id
    and a.workload = w.id
`

type GetAllStreamsRow struct {
	ID   uuid.UUID `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetAllStreams(ctx context.Context) ([]GetAllStreamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllStreams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllStreamsRow
	for rows.Next() {
		var i GetAllStreamsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}


