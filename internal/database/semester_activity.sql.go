// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSemesterActivity = `-- name: CreateSemesterActivity :one
INSERT INTO semester_activity(
        id,
        created_at,
        updated_at,
        group_id,
        class_id,
        teacher_id
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, class_id, group_id, teacher_id
`

type CreateSemesterActivityParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	GroupID   uuid.UUID
	ClassID   uuid.UUID
	TeacherID uuid.UUID
}

func (q *Queries) CreateSemesterActivity(ctx context.Context, arg CreateSemesterActivityParams) (SemesterActivity, error) {
	row := q.db.QueryRowContext(ctx, createSemesterActivity,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GroupID,
		arg.ClassID,
		arg.TeacherID,
	)
	var i SemesterActivity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClassID,
		&i.GroupID,
		&i.TeacherID,
	)
	return i, err
}

const deleteSemesterActivityById = `-- name: DeleteSemesterActivityById :exec
DELETE FROM semester_activity
WHERE id = $1
`

func (q *Queries) DeleteSemesterActivityById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSemesterActivityById, id)
	return err
}

const updateSemesterActivityById = `-- name: UpdateSemesterActivityById :one
UPDATE semester_activity
SET group_id = $2,
    class_id = $3,
    teacher_id = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, class_id, group_id, teacher_id
`

type UpdateSemesterActivityByIdParams struct {
	ID        uuid.UUID
	GroupID   uuid.UUID
	ClassID   uuid.UUID
	TeacherID uuid.UUID
}

func (q *Queries) UpdateSemesterActivityById(ctx context.Context, arg UpdateSemesterActivityByIdParams) (SemesterActivity, error) {
	row := q.db.QueryRowContext(ctx, updateSemesterActivityById,
		arg.ID,
		arg.GroupID,
		arg.ClassID,
		arg.TeacherID,
	)
	var i SemesterActivity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClassID,
		&i.GroupID,
		&i.TeacherID,
	)
	return i, err
}
